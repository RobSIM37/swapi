Part 1: SWAPI

Instructions
For each of the following use the SWAPI docs, to figure out the complete URL(s) (including params or queries) that you need to go to in order to reach the following data:

1.	The height of Darth Vader
		https://swapi.dev/api/people/4/
		You would then have to have to extract the res.data.height value and utilize it. (202)

2.	The population of the planet Alderaan
		https://swapi.dev/api/planets/2/
		You would then have to have to extract the res.data.population value and utilize it. (2000000)

3.	The name of the manufacturer of the Millennium Falcon
		https://swapi.dev/api/starships/10/
		You would then have to have to extract the res.data.manufacturer value and utilize it. (Corellian Engineering Corporation)

4.	The name of the species that C-3PO belongs to (multiple URLs)
		Starting with https://swapi.dev/api/people, you would need to extract the species link from the res.data.results[1].species[0] (looping through results until results[i].name === "C-3PO") and follow it to:
		https://swapi.dev/api/species/2/ and extract the res.data.name value and find that it is "droid"

5.	The title of each film that Obi-Wan Kenobi is in (multiple URLs)
		Starting with https://swapi.dev/api/people, you would need to extract the species link from the res.data.results[9].films (looping through results until results[i].name === "Obi-Wan Kenobi") and
		loop throught the values in films "[
               						"https://swapi.dev/api/films/1/", (A New Hope)
                						"https://swapi.dev/api/films/2/", (The Empire Strikes Back)
                						"https://swapi.dev/api/films/3/", (Return of the Jedi)
                						"https://swapi.dev/api/films/4/", (The Phantom Menace)
                						"https://swapi.dev/api/films/5/", (Attack of the Clones)
                						"https://swapi.dev/api/films/6/" (Revenge of the Sith)
            					]" and pull their res.data.title property

6.	Use the search query (the how to on the search query is at the bottom of the Getting Started section of the documentation) to get the information about the Millennium Falcon, it’s a starship
		https://swapi.dev/api/starships/?search=Millennium+Falcon
		https://swapi.dev/api/starships/?search=Millennium%20Falcon
		https://swapi.dev/api/starships/?search=Millennium

		All of the previous will work

Part 2: Social Mountain

1.	Check if the POST request accepts params, queries, and/or a body. Which one(s) and what information is it expecting to be sent?
		It is expecting a body with the text key and a string for the value

2.	What data type does the GET request return?
		It will return the list of posts if you GET: https://practiceapi.devmountain.com/api/posts/
		It fails if you attempt any params, such as: https://practiceapi.devmountain.com/api/posts/38 (even if you are fairly sure that is a valid ID)
		It still returns the list of posts (fails silently) if you attempt to pass a query: https://practiceapi.devmountain.com/api/posts/id=38

3.	What would the URL look like for deleting the post with the id 555? (This post does not exist anymore, but the syntax is the same for existing posts)
		DELETE: https://practiceapi.devmountain.com/api/posts/id=555

4.	List the possible response codes from the GET request at /posts/filter
		200: Returns an array of filtered posts
		409: Request query is missing required text property.

5.	Create a post whose text is your name, record the URL and body here:
		URL:	https://practiceapi.devmountain.com/api/posts
		Body: 	{
    			"text": "Inigo Montoya, you killed my father, prepare to die."
			}

6.	What would the URL and body object be to update the post you just made to contain your favorite color instead of your name?
		URL:	https://practiceapi.devmountain.com/api/posts
		Body: 	{
    			"text": "green"
			}

7.	What is the URL to get posts that contain the text “blue”?
		GET: https://practiceapi.devmountain.com/api/posts/filter?text=blue

8.	Make a request to GET all the posts. What are the content type and charset of the response? (Hint: look on the Headers)
		application/json
		charset=utf-8

9.	What would cause a PUT request to return a 409 status?
		409: description: Request was missing req.query.id or req.body.text

10.	What happens if you try to send a query in the GET request URL? Why do you get that response?
		You get the full list back (unless you are filtering) because it is not set up to handle quries but fails silently.